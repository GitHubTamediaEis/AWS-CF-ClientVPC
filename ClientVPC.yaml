AWSTemplateFormatVersion: "2010-09-09"
Description: Setup a VPC with private, public and intraVPC subnets in three AZs. Includes one NAT- and one Internet-Gateway. Optional Transit Gateway attachement and custom features.

Parameters:

  VpcSize:
    Type: String
    Default: "S"
    Description: Select the size of your VPC.
    AllowedValues: 
      - "S"
      - "M"
      - "L"
      - "XL"
     
  ValidationToken:
    Type: String
    Description: "If you select a VPC size other than S, you need to request a token from Network Services first (network@tamedia.ch) providing the following details: Requirement for bigger VPC, the region to deploy in, your account ID and the desired VPC size."

  ConnectToCorpSharedServices:
    Type: String
    Default: "yes"
    Description: "Do you need access to Tamedia Corp shared services and VPN? (yes/NO)"
    AllowedValues: 
      - "yes"
      - "no"
    ConstraintDescription: Value must be either "yes" or "no".

  CustomImplementationTag:
    Type: String
    Default: ""
    Description: "Custom ID provided by Tamedia IT for specific implementation, if any"

    
  # UseCustomizedDNSResolution:
  #   Type: String
  #   Default: "no"
  #   Description: Customize DNS resolution parameters (NO/yes) 
  #   AllowedValues: 
  #     - "yes"
  #     - "no"
  #   ConstraintDescription: Value must be either "yes" or "no".
  
  # DnsDomainName:
  #   Type: String
  #   Default: eu-west-1.compute.internal
  #   Description: DNS domain name (included in DHCP options)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label: { default: Vpc size }
        Parameters:
          - VpcSize
          - ValidationToken
      - Label: { default: Connect to corporate shared services }
        Parameters:
          - ConnectToCorpSharedServices
      # - Label: { default: AZ1 network setup }
      #   Parameters:
      #     - Zone1
      # - Label: { default: AZ2 network setup }
      #   Parameters:
      #     - Zone2
      # - Label: { default: AZ3 network setup }
      #   Parameters:
      #     - Zone3

    ParameterLabels:
      VpcSize:
        default: Size of the VPC
      ValidationToken:
        default: Token for M, L and XL sized VPC
      ConnectToCorpSharedServices:
        default: Enable access to corporate shared services
      # Zone1:
      #   default: First AZ
      # Zone2:
      #   default: Second AZ
      # Zone3:
      #   default: Third AZ

Conditions:
  CreateTGWAttachement: !Equals [ !Ref ConnectToCorpSharedServices, "yes" ]
  # DefineCustomDNSParameters: !Equals [ !Ref UseCustomizedDNSParameters, "yes" ]

Mappings: 
  RegionMap: 
    eu-west-1: 
      "TransitGatewayId": "tgw-007d36bdceb60c458"
## Temporary use Sandbox TGW
      # "TransitGatewayId": "tgw-0027759d22e91dd30"
      "AZ1": "eu-west-1a"
      "AZ2": "eu-west-1b"
      "AZ3": "eu-west-1c"
      "NetAttachmentSNSARN": "arn:aws:sns:eu-west-1:733626620836:NewClientAttachmentLambda"
## Temporary use Sandbox TGW
      # "NetAttachmentSNSARN": "arn:aws:sns:eu-west-1:778281744792:NewAttachment"

    eu-central-1: 
      "TransitGatewayId": ""
      "AZ1": "eu-central-1a"
      "AZ2": "eu-central-1b"
      "AZ3": "eu-central-1c"
      "NetAttachmentSNSARN": "arn:aws:sns:eu-west-1:733626620836:NewClientAttachmentLambda"


Resources:

# Create the VPCIpAddresses

  VpcAddressCustomResource:
    Type: Custom::VpcAddress
    Properties: 
      ServiceToken: arn:aws:sns:eu-west-1:733626620836:VPCIpAddressesLambda
      VpcSize: !Ref VpcSize
      Token: !Ref ValidationToken

# Setup the main Vpc component

  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      EnableDnsSupport: true
      EnableDnsHostnames: true
      CidrBlock: !GetAtt VpcAddressCustomResource.outputVpcCidrBlock
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}

# Setup the primary public subnet

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ1]
      VpcId: !Ref Vpc
      CidrBlock: !GetAtt VpcAddressCustomResource.outputAz1Public
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet1

# Setup the secondary public subnet

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ2]
      VpcId: !Ref Vpc
      CidrBlock: !GetAtt VpcAddressCustomResource.outputAz2Public
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet2

# Setup the third public subnet

  PublicSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ3]
      VpcId: !Ref Vpc
      CidrBlock: !GetAtt VpcAddressCustomResource.outputAz3Public
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PublicSubnet3

# Setup the primary private subnet

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ1]
      VpcId: !Ref Vpc
      CidrBlock: !GetAtt VpcAddressCustomResource.outputAz1Private
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet1

# Setup the secondary private subnet

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ2]
      VpcId: !Ref Vpc
      CidrBlock: !GetAtt VpcAddressCustomResource.outputAz2Private
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet2

# Setup the third private subnet

  PrivateSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ3]
      VpcId: !Ref Vpc
      CidrBlock: !GetAtt VpcAddressCustomResource.outputAz3Private
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-PrivateSubnet3

# Setup the primary private subnet

  IntraVPCSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ1]
      VpcId: !Ref Vpc
      CidrBlock: !GetAtt VpcAddressCustomResource.outputAz1IntraVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IntraVPCSubnet1

# Setup the secondary private subnet

  IntraVPCSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ2]
      VpcId: !Ref Vpc
      CidrBlock: !GetAtt VpcAddressCustomResource.outputAz2IntraVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IntraVPCSubnet2

# Setup the third private subnet

  IntraVPCSubnet3:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !FindInMap [RegionMap, !Ref "AWS::Region", AZ3]
      VpcId: !Ref Vpc
      CidrBlock: !GetAtt VpcAddressCustomResource.outputAz3IntraVPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IntraVPCSubnet3

# Setup the internet gateway

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
     Tags:
       - Key: Name
         Value: !Sub ${AWS::StackName}-InternetGateway

# Attach the internet gateway to the Vpc

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref Vpc
      InternetGatewayId: !Ref InternetGateway
  
# Attach VPC to the global tamedia corp transit gateway

  AttachmentToTransitGateway:
    Condition: CreateTGWAttachement
    Type: AWS::EC2::TransitGatewayAttachment
    Properties: 
      SubnetIds:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
      Tags:
        - Key: Name
          Value: !Sub ${AWS::AccountId}-AttachToTransitGateway
      TransitGatewayId: !FindInMap [RegionMap, !Ref "AWS::Region", TransitGatewayId]
      VpcId: !Ref Vpc
  
# Call lambda for the required additionnal actions on the TGW attachment

  TGWattachementCustomResource:
    Type: Custom::NewTGWAttachement
    Condition: CreateTGWAttachement
#    DependsOn: NatGateway
#    DependsOn: AttachmentToTransitGateway
    Properties: 
      ServiceToken: !FindInMap [RegionMap, !Ref "AWS::Region", NetAttachmentSNSARN]
      # Region: !Ref "AWS::Region"
      TransitGatewayAttachmentId: !Ref AttachmentToTransitGateway
      CustomImplementationTag: !Ref CustomImplementationTag

  # VpnGateway:
  #   Type: AWS::EC2::VPNGateway
  #   Condition: CreateVpn
  #   Properties:
  #     Type: ipsec.1
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${AWS::StackName}-VpnGateway

  # CustomerVpnGateway:  
  #   Type: "AWS::EC2::CustomerGateway"
  #   Condition: CreateCustomerGateway
  #   Properties:
  #     BgpAsn: 65000
  #     IpAddress: !Ref CustomerGatewayAddress
  #     Type: ipsec.1
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${AWS::StackName}-CustomerGateway

  # VpnConnection:
  #   Type: AWS::EC2::VPNConnection
  #   Condition: CreateVpn
  #   Properties:
  #     Type: ipsec.1
  #     StaticRoutesOnly: true
  #     VpnGatewayId: !Ref VpnGateway
  #     CustomerGatewayId: !If [CreateCustomerGateway, !Ref CustomerVpnGateway, !Ref CustomerGatewayId]
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${AWS::StackName}-VpnConnection

  # VpnConnectionRoute:
  #   Type: AWS::EC2::VPNConnectionRoute
  #   Condition: CreateVpn
  #   Properties:
  #     VpnConnectionId: !Ref VpnConnection
  #     DestinationCidrBlock: 145.234.0.0/16

  # VpnConnectionRoute2:
  #   Type: AWS::EC2::VPNConnectionRoute
  #   Condition: CreateVpn
  #   Properties:
  #     VpnConnectionId: !Ref VpnConnection
  #     DestinationCidrBlock: 10.30.0.0/16

  # VpnConnectionRoute3:
  #   Type: AWS::EC2::VPNConnectionRoute
  #   Condition: CreateVpn
  #   Properties:
  #     VpnConnectionId: !Ref VpnConnection
  #     DestinationCidrBlock: 10.24.0.0/16     

  # VpnConnectionRoute4:
  #     Type: AWS::EC2::VPNConnectionRoute
  #     Condition: CreateVpn
  #     Properties:
  #       VpnConnectionId: !Ref VpnConnection
  #       DestinationCidrBlock: 10.0.240.0/23  

  # VpnConnectionRoute5:
  #     Type: AWS::EC2::VPNConnectionRoute
  #     Condition: CreateVpn
  #     Properties:
  #       VpnConnectionId: !Ref VpnConnection
  #       DestinationCidrBlock: 10.0.249.0/24

  # VpnConnectionRoute6:
  #     Type: AWS::EC2::VPNConnectionRoute
  #     Condition: CreateVpn
  #     Properties:
  #       VpnConnectionId: !Ref VpnConnection
  #       DestinationCidrBlock: 10.0.250.0/24      

  # VpnConnectionRoute7:
  #     Type: AWS::EC2::VPNConnectionRoute
  #     Condition: CreateVpn
  #     Properties:
  #       VpnConnectionId: !Ref VpnConnection
  #       DestinationCidrBlock: 10.100.4.0/22      

  # AttachVpnGateway:
  #   Type: AWS::EC2::VPCGatewayAttachment
  #   Condition: CreateVpn
  #   Properties:
  #     VpcId: !Ref Vpc
  #     VpnGatewayId: !Ref VpnGateway

  NatGatewayEip:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEip.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-NatGateway

  # DhcpOptions:
  #   Type: AWS::EC2::DHCPOptions
  #   Condition: DefineCustomDNSParameters
  #   Properties:
  #     DomainName: !Ref DnsDomainName
  #     DomainNameServers: !Ref DnsServers
  #     NtpServers: !Ref NtpServers
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${AWS::StackName}-DhcpOptions

  # AttachDhcpOptions:
  #   Type: AWS::EC2::VPCDHCPOptionsAssociation
  #   Condition: DefineCustomDNSParameters
  #   Properties: 
  #     DhcpOptionsId: !Ref DhcpOptions
  #     VpcId: !Ref Vpc

  # VpcPeering:
  #   Type: "AWS::EC2::VPCPeeringConnection"
  #   Condition: CreateVpcPeering
  #   Properties: 
  #     PeerVpcId: !Ref PeerVpc
  #     VpcId: !Ref Vpc
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${AWS::StackName}-MgmtVpcPeering

# Setup a public route table

  RouteTablePublic:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Public

# Setup the primary private route table

  RouteTablePrivate:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-Private

# Setup the primary intra VPC route table

  RouteTableIntraVPC:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-IntraVPC

# Add routes for public subnets

  # PeeringRoutePublic:
  #   Type: AWS::EC2::Route
  #   Condition: CreateVpcPeering
  #   Properties:
  #     RouteTableId: !Ref RouteTablePublic
  #     DestinationCidrBlock: !Ref PeerVpcCidr
  #     VpcPeeringConnectionId: !Ref VpcPeering      

  # PeeringRoutePublicPeerVpc:
  #   Type: AWS::EC2::Route
  #   Condition: CreateVpcPeering
  #   Properties:
  #     RouteTableId: !Ref PeerVpcPublicRouteTable
  #     DestinationCidrBlock:
  #       !GetAtt VpcAddressCustomResource.outputVpcCidrBlock
  #     VpcPeeringConnectionId: !Ref VpcPeering

  InternetRoutePublic:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RoutePublicTGW1:
    Type: AWS::EC2::Route
    Condition: CreateTGWAttachement
    DependsOn: AttachmentToTransitGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 145.234.0.0/16
      TransitGatewayId: !FindInMap [RegionMap, !Ref "AWS::Region", TransitGatewayId]

  RoutePublicTGW2:
    Type: AWS::EC2::Route
    Condition: CreateTGWAttachement
    DependsOn: AttachmentToTransitGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !FindInMap [RegionMap, !Ref "AWS::Region", TransitGatewayId]

  RoutePublicTGW3:
    Type: AWS::EC2::Route
    Condition: CreateTGWAttachement
    DependsOn: AttachmentToTransitGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 172.16.0.0/12
      TransitGatewayId: !FindInMap [RegionMap, !Ref "AWS::Region", TransitGatewayId]

  RoutePublicTGW4:
    Type: AWS::EC2::Route
    Condition: CreateTGWAttachement
    DependsOn: AttachmentToTransitGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 192.168.0.0/16
      TransitGatewayId: !FindInMap [RegionMap, !Ref "AWS::Region", TransitGatewayId]

  # VpnRoutePublicSubnet2:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePublic
  #     DestinationCidrBlock: 10.30.0.0/16
  #     GatewayId: !Ref VpnGateway

  # VpnRoutePublicSubnet3:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePublic
  #     DestinationCidrBlock: 10.24.0.0/16
  #     GatewayId: !Ref VpnGateway         

  # VpnRoutePublic4:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePublic
  #     DestinationCidrBlock: 10.0.240.0/23
  #     GatewayId: !Ref VpnGateway

  # VpnRoutePublic5:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePublic
  #     DestinationCidrBlock: 10.0.249.0/24
  #     GatewayId: !Ref VpnGateway

  # VpnRoutePublic6:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePublic
  #     DestinationCidrBlock: 10.0.250.0/24
  #     GatewayId: !Ref VpnGateway

  # VpnRoutePublic7:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePublic
  #     DestinationCidrBlock: 10.100.4.0/22
  #     GatewayId: !Ref VpnGateway

  DmzRoutePublic:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTablePublic
      DestinationCidrBlock: 145.234.240.0/22
      GatewayId: !Ref InternetGateway

# Add routes for private subnets

  RoutePrivateTGW1:
    Type: AWS::EC2::Route
    Condition: CreateTGWAttachement
    DependsOn: AttachmentToTransitGateway
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 145.234.0.0/16
      TransitGatewayId: !FindInMap [RegionMap, !Ref "AWS::Region", TransitGatewayId]

  RoutePrivateTGW2:
    Type: AWS::EC2::Route
    Condition: CreateTGWAttachement
    DependsOn: AttachmentToTransitGateway
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 10.0.0.0/8
      TransitGatewayId: !FindInMap [RegionMap, !Ref "AWS::Region", TransitGatewayId]

  RoutePrivateTGW3:
    Type: AWS::EC2::Route
    Condition: CreateTGWAttachement
    DependsOn: AttachmentToTransitGateway
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 172.16.0.0/12
      TransitGatewayId: !FindInMap [RegionMap, !Ref "AWS::Region", TransitGatewayId]

  RoutePrivateTGW4:
    Type: AWS::EC2::Route
    Condition: CreateTGWAttachement
    DependsOn: AttachmentToTransitGateway
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 192.168.0.0/16
      TransitGatewayId: !FindInMap [RegionMap, !Ref "AWS::Region", TransitGatewayId]
      
  # PeeringRoutePrivate:
  #   Type: AWS::EC2::Route
  #   Condition: CreateVpcPeering
  #   Properties:
  #     RouteTableId: !Ref RouteTablePrivate
  #     DestinationCidrBlock: !Ref PeerVpcCidr
  #     VpcPeeringConnectionId: !Ref VpcPeering 

  # PeeringRoutePrivatePeerVpc:
  #   Type: AWS::EC2::Route
  #   Condition: CreateVpcPeering
  #   Properties:
  #     RouteTableId: !Ref PeerVpcPrivateRouteTable
  #     DestinationCidrBlock:
  #       !GetAtt VpcAddressCustomResource.outputVpcCidrBlock
  #     VpcPeeringConnectionId: !Ref VpcPeering      

  # VpnRoutePrivate:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePrivate
  #     DestinationCidrBlock: 145.234.0.0/16
  #     GatewayId: !Ref VpnGateway

  # VpnRoutePrivateSubnet2:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePrivate
  #     DestinationCidrBlock: 10.30.0.0/16
  #     GatewayId: !Ref VpnGateway      

  # VpnRoutePrivateSubnet3:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePrivate
  #     DestinationCidrBlock: 10.24.0.0/16
  #     GatewayId: !Ref VpnGateway         

  # VpnRoutePrivate4:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePrivate
  #     DestinationCidrBlock: 10.0.240.0/23
  #     GatewayId: !Ref VpnGateway

  # VpnRoutePrivate5:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePrivate
  #     DestinationCidrBlock: 10.0.249.0/24
  #     GatewayId: !Ref VpnGateway

  # VpnRoutePrivate6:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePrivate
  #     DestinationCidrBlock: 10.0.250.0/24
  #     GatewayId: !Ref VpnGateway

  # VpnRoutePrivate7:
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePrivate
  #     DestinationCidrBlock: 10.100.4.0/22
  #     GatewayId: !Ref VpnGateway

  # DmzRoutePrivateSubnet1: # Exception for RAS-TAM DMZ to be routed via VPN
  #   Type: AWS::EC2::Route
  #   DependsOn: AttachVpnGateway
  #   Condition: CreateVpn
  #   Properties:
  #     RouteTableId: !Ref RouteTablePrivate
  #     DestinationCidrBlock: 145.234.241.0/27
  #     GatewayId: !Ref VpnGateway

  DmzRoutePrivate:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 145.234.240.0/22
      NatGatewayId: !Ref NatGateway

  InternetRouteIntraVPC:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTableIntraVPC
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  NatRoutePrivate:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTablePrivate
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

# Associate the Public route table to the the first public subnet

  SubnetRouteTableAssociationPublicSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref RouteTablePublic

# Associate the Public route table to the the second public subnet

  SubnetRouteTableAssociationPublicSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref RouteTablePublic

# Associate the Public route table to the the third public subnet

  SubnetRouteTableAssociationPublicSubnet3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet3
      RouteTableId: !Ref RouteTablePublic

# Associate the primary Private route table to the the first private subnet

  SubnetRouteTableAssociationPrivateSubnet1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref RouteTablePrivate

# Associate the Secondary Private route table to the the second private subnet

  SubnetRouteTableAssociationPrivateSubnet2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref RouteTablePrivate

# Associate the Secondary Private route table to the the third private subnet

  SubnetRouteTableAssociationPrivateSubnet3:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet3
      RouteTableId: !Ref RouteTablePrivate

  # SecGrpDefaultAccess:
  #   Type: AWS::EC2::SecurityGroup
  #   Condition: CreateTGWAttachement
  #   DependsOn: AttachmentToTransitGateway
  #   Properties:
  #     VpcId: !Ref Vpc
  #     GroupName: !Sub ${AWS::StackName}-DefaultAccess
  #     GroupDescription: Default access rules for Mgmt, Monitoring, AntiVirus and the like.
  #     SecurityGroupIngress:
  #       #SSH Management from 145.234.0.0/16
  #       - IpProtocol: tcp
  #         CidrIp: 145.234.0.0/16
  #         FromPort: 22
  #         ToPort: 22
  #       #RDP Management from 145.234.0.0/16
  #       - IpProtocol: tcp
  #         CidrIp: 145.234.0.0/16
  #         FromPort: 3389
  #         ToPort: 3389
  #       #TrendMicro from s7380
  #       - IpProtocol: tcp
  #         CidrIp: 145.234.72.123/32
  #         FromPort: 4118
  #         ToPort: 4118
  #       #TrendMicro from s7387
  #       - IpProtocol: tcp
  #         CidrIp: 145.234.72.117/32
  #         FromPort: 4118
  #         ToPort: 4118
  #       #SNMP from s6612 (cMK Bern active)
  #       - IpProtocol: udp
  #         CidrIp: 145.234.70.181/32
  #         FromPort: 161
  #         ToPort: 161
  #       #SNMP from s6613 (cMK Bern passive)
  #       - IpProtocol: udp
  #         CidrIp: 145.234.70.182/32
  #         FromPort: 161
  #         ToPort: 161
  #       #ICMP (Ping) from 145.234.0.0/16
  #       - IpProtocol: icmp
  #         CidrIp: 145.234.0.0/16
  #         FromPort: -1
  #         ToPort: -1
  #     Tags:
  #       - Key: Name
  #         Value: !Sub ${AWS::StackName}-DefaultAccess
          
# Setup S3 VPC Endpoint if required
                  
  # S3Endpoint:
  #   Type: 'AWS::EC2::VPCEndpoint'
  #   Condition: CreateS3EndPoint
  #   Properties:    
  #     RouteTableIds:
  #       - !Ref RouteTablePrivate
  #     ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
  #     VpcId: !Ref Vpc

Outputs:

  Vpc:
    Value: !Ref Vpc
    Export:
      Name: Vpc
      
  VpcCidrBlock:
    Value:
        !GetAtt VpcAddressCustomResource.outputVpcCidrBlock
    Export:
      Name: Vpc-CidrBlock

  AZ1:
    Value: !FindInMap [RegionMap, !Ref "AWS::Region", AZ1]
    Export:
      Name: AZ1

  AZ2:
    Value: !FindInMap [RegionMap, !Ref "AWS::Region", AZ2]
    Export:
      Name: AZ2

  AZ3:
    Value: !FindInMap [RegionMap, !Ref "AWS::Region", AZ3]
    Export:
      Name: AZ3

  PublicSubnet1:
    Value: !Ref PublicSubnet1
    Export:
      Name: PublicSubnet1
      
  PublicSubnet1CidrBlock:
    Value:
        !GetAtt VpcAddressCustomResource.outputAz1Public
    Export:
      Name: PublicSubnet1-CidrBlock

  PublicSubnet2:
    Value: !Ref PublicSubnet2
    Export:
      Name: PublicSubnet2
      
  PublicSubnet2CidrBlock:
    Value:
        !GetAtt VpcAddressCustomResource.outputAz2Public
    Export:
      Name: PublicSubnet2-CidrBlock

  PublicSubnet3:
    Value: !Ref PublicSubnet3
    Export:
      Name: PublicSubnet3
      
  PublicSubnet3CidrBlock:
    Value:
        !GetAtt VpcAddressCustomResource.outputAz3Public
    Export:
      Name: PublicSubnet3-CidrBlock

  PrivateSubnet1:
    Value: !Ref PrivateSubnet1
    Export:
      Name: PrivateSubnet1
      
  PrivateSubnet1CidrBlock:
    Value:
        !GetAtt VpcAddressCustomResource.outputAz1Private
    Export:
      Name: PrivateSubnet1-CidrBlock

  PrivateSubnet2:
    Value: !Ref PrivateSubnet2
    Export:
      Name: PrivateSubnet2
      
  PrivateSubnet2CidrBlock:
    Value:
        !GetAtt VpcAddressCustomResource.outputAz2Private
    Export:
      Name: PrivateSubnet2-CidrBlock
      
  PrivateSubnet3:
    Value: !Ref PrivateSubnet3
    Export:
      Name: PrivateSubnet3
      
  PrivateSubnet3CidrBlock:
    Value:
        !GetAtt VpcAddressCustomResource.outputAz3Private
    Export:
      Name: PrivateSubnet3-CidrBlock

  IntraVPCSubnet1:
    Value: !Ref IntraVPCSubnet1
    Export:
      Name: IntraVPCSubnet1
      
  IntraVPCSubnet1CidrBlock:
    Value:
        !GetAtt VpcAddressCustomResource.outputAz1IntraVPC
    Export:
      Name: IntraVPCSubnet1-CidrBlock

  IntraVPCSubnet2:
    Value: !Ref IntraVPCSubnet2
    Export:
      Name: IntraVPCSubnet2
      
  IntraVPCSubnet2CidrBlock:
    Value:
        !GetAtt VpcAddressCustomResource.outputAz2IntraVPC
    Export:
      Name: IntraVPCSubnet2-CidrBlock
      
  IntraVPCSubnet3:
    Value: !Ref IntraVPCSubnet3
    Export:
      Name: IntraVPCSubnet3
      
  IntraVPCSubnet3CidrBlock:
    Value:
        !GetAtt VpcAddressCustomResource.outputAz3IntraVPC
    Export:
      Name: IntraVPCSubnet3-CidrBlock

  NatGatewayEip:
    Value: !Ref NatGatewayEip
    Export:
      Name: NatGatewayEip

  # VpnGateway:
  #   Condition: CreateVpn
  #   Value: !Ref VpnGateway
  #   Export:
  #     Name: VpnGateway

  # DhcpOptions:
  #   Condition: DefineCustomDNSParameters
  #   Value: !Ref DhcpOptions
  #   Export:
  #     Name: DhcpOptions

  # VpcPeering:
  #   Condition: CreateVpcPeering
  #   Value: !Ref VpcPeering
  #   Export:
  #     Name: MgmtVpcPeering

  # SecGrpDefaultAccess:
  #   Condition: CreateTGWAttachement
  #   Value: !Ref SecGrpDefaultAccess
  #   Export:
  #     Name: DefaultAccess
      
  # S3Endpoint:
  #   Condition: CreateS3EndPoint
  #   Value: !Ref S3Endpoint
  #   Export:
  #     Name: S3Endpoint
